#!/usr/bin/env python3
################################################################
# Copyright (c) 2024 Witalis Domitrz <witekdomitrz@gmail.com>
# AGPL License
################################################################
import i3ipc


def container_to_ignore(container: i3ipc.Con) -> bool:
    if "_on" in container.floating:  # Floating
        return True
    if container.fullscreen_mode == 1:  # Full screen
        return True
    if container.parent.layout == "stacked":
        return True
    if container.parent.layout == "tabbed":
        return True
    return False


def get_widows_on_workspace(workspace):
    return list(
        filter(
            lambda container: container.window and not container_to_ignore(container),
            workspace.descendants(),
        )
    )


def resize_2nd_and_3rd(i3: i3ipc.Connection, event: i3ipc.WindowEvent):
    if event.container.ipc_data.get("last_split_layout") != "splith":
        print(event.container.__dict__)
        return
    container = i3.get_tree().find_focused()
    if container_to_ignore(container):
        return

    if (
        numer_of_windows := len(get_widows_on_workspace(container.workspace()))
    ) not in [2, 3]:
        return

    workspace_width = container.workspace().rect.width

    if numer_of_windows == 2:
        i3.command(f"resize set {workspace_width // 3}")
        return
    elif numer_of_windows == 3:
        for _ in range(2):
            i3.command("focus left")
        for i in range(3):
            if i != 0:
                i3.command("focus right")
            i3.command(f"resize set {workspace_width // 3}")


def up_to_3_colums(i3: i3ipc.Connection, _event: i3ipc.WindowEvent):
    container = i3.get_tree().find_focused()
    if container_to_ignore(container):
        return

    i3.command(
        "splith"
        if len(get_widows_on_workspace(container.workspace())) < 3
        else "splitv"
    )


def layout_3_columns(i3):
    i3.on(i3ipc.Event.WINDOW_FOCUS, up_to_3_colums)
    i3.on(i3ipc.Event.WINDOW_NEW, resize_2nd_and_3rd)


def main():
    i3 = i3ipc.Connection()
    layout_3_columns(i3)
    i3.main()


if __name__ == "__main__":
    main()
