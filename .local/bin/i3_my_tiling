#!/usr/bin/env python3
################################################################
# Copyright (c) 2024 Witalis Domitrz <witekdomitrz@gmail.com>
# AGPL License
################################################################
import i3ipc


def container_to_ignore(container: i3ipc.Con | None) -> bool:
    return (
        container is None
        or "_on" in container.floating  # Floating
        or container.fullscreen_mode == 1  # Full screen
        or container.parent.layout == "stacked"
        or container.parent.layout == "tabbed"
    )


def n_column_layout(i3: i3ipc.Connection, *, n: int) -> None:
    def resize_to_nth(i3: i3ipc.Connection, event: i3ipc.WindowEvent) -> None:
        if event.container.ipc_data.get("last_split_layout") != "splith":
            return
        if container_to_ignore(container := i3.get_tree().find_focused()):
            return

        workspace_width: int = container.workspace().rect.width
        container_width: int = container.rect.width
        size_delta: int = container_width % (workspace_width // n)
        if size_delta < n or (workspace_width // n - size_delta) < n:
            return
        i3.command(f"resize set {container_width - size_delta}")

    def up_to_n_colums(i3: i3ipc.Connection, _event: i3ipc.WindowEvent) -> None:

        if container_to_ignore(container := i3.get_tree().find_focused()):
            return

        how_to_split: str = (
            "splith"
            if container.rect.width > container.workspace().rect.width // n + 1
            else "splitv"
        )
        i3.command(how_to_split)

    i3.on(event=i3ipc.Event.WINDOW_NEW, handler=resize_to_nth)
    i3.on(event=i3ipc.Event.WINDOW_CLOSE, handler=resize_to_nth)
    i3.on(event=i3ipc.Event.WINDOW_MOVE, handler=resize_to_nth)
    i3.on(event=i3ipc.Event.WINDOW_FOCUS, handler=up_to_n_colums)


def main():
    i3 = i3ipc.Connection()
    n_column_layout(i3, n=3)
    i3.main()


if __name__ == "__main__":
    main()
